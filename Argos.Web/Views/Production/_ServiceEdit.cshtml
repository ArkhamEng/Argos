@model Service
@using Argos.Models.Production

@Scripts.Render("~/bundles/jqueryval")

@using (Html.BeginForm("SaveService", "Production", FormMethod.Post, new { id = "ServiceForm" }))
{
    @Html.AntiForgeryToken()

    <div class="panel panel-success">
        <div class="panel-heading">
            <button class="close" type="button" onclick="HideModal(null,true)"><span class="fa fa-times"></span></button>
            <h4 class="panel-title">
                <i class="fa fa-wrench"></i> Completar servicio
            </h4>
        </div>
        <div class="panel-body small">

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            @Html.HiddenFor(model=> model.OccurenceId)

            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.Account.Code, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"><i class="fa fa-tag"></i></span>
                    @Html.EditorFor(model => model.Account.Code, new { htmlAttributes = new { @class = "form-control input-sm", disabled = true } })
                </div>
            </div>

            <div class="form-group col-md-6 col-md-offset-2">
                @Html.LabelFor(model => model.Account.AccountType.Name, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"><i class="fa fa-sitemap"></i></span>
                    @Html.EditorFor(model => model.Account.AccountType.Name, new { htmlAttributes = new { @class = "form-control input-sm", disabled = true } })
                </div>
            </div>

            <div class="form-group col-md-12">
                @Html.LabelFor(model => model.Account.Client.Name, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"><i class="fa fa-users"></i></span>
                    @Html.EditorFor(model => model.Account.Client.Name, new { htmlAttributes = new { @class = "form-control input-sm", disabled = true } })
                </div>
            </div>

            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.ScheduleDate, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                    @Html.EditorFor(model => model.ScheduleDate, new { htmlAttributes = new { @class = "form-control input-sm", type = "text", disabled = true } })
                </div>
            </div>

            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.DueDate, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                    @Html.EditorFor(model => model.DueDate, new { htmlAttributes = new { @class = "form-control input-sm", type = "text", disabled = true } })
                </div>
            </div>

        

            <div class="form-group col-md-12">
                @Html.LabelFor(model => model.Comment, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"><i class="fa fa-comment"></i></span>
                    @Html.TextAreaFor(model => model.Comment, 2, 1, htmlAttributes: new { @class = "form-control text-capitalize input-sm" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Concluido", htmlAttributes: new { @class = "control-label" })
                <div class="checkbox-inline">
                    @Html.EditorFor(model => model.IsDone, new { htmlAttributes = new { @class = "BlockEdit flat" } })
                </div>
            </div>
        </div>
        <div class="panel-footer">
            <button type="submit" class="btn btn-success btn-sm">
                <span class="fa fa-save"></span>
                Guardar
            </button>
            <button type="button" class="btn btn-danger btn-sm" onclick="HideModal(null,true)">
                <span class="fa fa-times"></span>
                Cerrar
            </button>
        </div>
    </div>

}

<script>
    $(document).ready(function ()
    {
        iCheckInit();

        $("#ScheduleDate").mask("99/99/9999");

        $("#DueDate").mask("99/99/9999");

      
        SubmitService();
    });

    function SubmitService()
    {
        $("#ServiceForm").off('submit').on('submit', function (e)
        {
            e.preventDefault();
            e.stopImmediatePropagation();

            var $form = $(e.target),
            formData = new FormData(),
            params = $form.serializeArray(),
            files = [];

            if (!$form.valid())
            {
                ShowNotify("Error de validación", "danger", "El formulario contiene errores, por favor verifica", 3500);
                return;
            }


            //agrego todos los campos del formulario
            $.each(params, function (i, val)
            {
                formData.append(val.name, val.value);
            });

            HideModal(function ()
            {
                ShowLoading('static');

                SumitAjax($form.attr('action'), formData, function (response)
                {
                    HideLoading(function ()
                    {
                        ShowNotify(response.Header, response.Result, response.Body, 3000);

                        SearchServices();
                    });
                });

            }, true);
        });
    }
</script>
